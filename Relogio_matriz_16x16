#include <FastLED.h>

#define NUM_LEDS 256
CRGB leds[NUM_LEDS];
const uint8_t matrizLargura = 16;
const uint8_t matrizAltura = 16;

// Exemplo de fonte simples: cada caractere é uma matriz 5x7
const uint8_t font5x7[][5] = {
  {0x00, 0x5F, 0x00, 0x00, 0x00}, // '!'
  // Defina outros caracteres...
};

// Função que desenha um caractere no buffer da matriz
void desenhaCaractere(uint8_t caractere, int x, int y) {
  if (caractere < ' ') return;
  const uint8_t *bitmap = font5x7[caractere - ' '];
  for (uint8_t col = 0; col < 5; col++) {
    uint8_t linha = bitmap[col];
    for (uint8_t row = 0; row < 7; row++) {
      bool aceso = linha & (1 << row);
      int posX = x + col;
      int posY = y + row;
      if (posX >= 0 && posX < matrizLargura && posY >= 0 && posY < matrizAltura) {
        leds[posY * matrizLargura + posX] = aceso ? CRGB::White : CRGB::Black;
      }
    }
  }
}

// Função para desenhar um texto na matriz com deslocamento horizontal
void desenhaTexto(const char* texto, int offset) {
  // Limpa a matriz
  fill_solid(leds, NUM_LEDS, CRGB::Black);
  int posX = -offset;
  for (const char* p = texto; *p; p++) {
    desenhaCaractere(*p, posX, 4); // Desenha cada caractere a partir de uma linha base
    posX += 6; // 5 pixels do caractere + 1 pixel de espaço
  }
}

void setup() {
  FastLED.addLeds<WS2812B, DATA_PIN, GRB>(leds, NUM_LEDS);
  FastLED.setBrightness(50);
}

int scrollOffset = 0;
const char* mensagem = "Olá Mundo! ";

void loop() {
  desenhaTexto(mensagem, scrollOffset);
  FastLED.show();
  scrollOffset++;  
  // Quando o texto sair da tela, reinicia o scroll
  if (scrollOffset > strlen(mensagem) * 6) {
    scrollOffset = 0;
  }
  delay(100);
}
